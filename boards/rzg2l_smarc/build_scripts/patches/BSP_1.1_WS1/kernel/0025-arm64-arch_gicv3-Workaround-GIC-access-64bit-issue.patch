From 174a0800c43bab4629b9a6b75ef0d515733bffdd Mon Sep 17 00:00:00 2001
From: Binh Nguyen <binh.nguyen.jz@renesas.com>
Date: Thu, 7 Jan 2021 18:54:00 +0700
Subject: [PATCH 025/135] arm64: arch_gicv3: Workaround GIC access 64bit issue

we are having HW issue when access 64bits to GIC registers
This commit add a workaround for now.

Signed-off-by: Binh Nguyen <binh.nguyen.jz@renesas.com>
---
 arch/arm64/include/asm/arch_gicv3.h | 58 ++++++++++++++++++++++++++-----------
 1 file changed, 41 insertions(+), 17 deletions(-)

diff --git a/arch/arm64/include/asm/arch_gicv3.h b/arch/arm64/include/asm/arch_gicv3.h
index e278f94..43584ee 100644
--- a/arch/arm64/include/asm/arch_gicv3.h
+++ b/arch/arm64/include/asm/arch_gicv3.h
@@ -21,10 +21,10 @@
 #include <asm/sysreg.h>
 
 #ifndef __ASSEMBLY__
-
 #include <linux/stringify.h>
 #include <asm/barrier.h>
 #include <asm/cacheflush.h>
+#include <asm/io.h>
 
 #define read_gicreg(r)			read_sysreg_s(SYS_ ## r)
 #define write_gicreg(v, r)		write_sysreg_s(v, SYS_ ## r)
@@ -114,31 +114,55 @@ static inline void gic_write_bpr1(u32 val)
 	write_sysreg_s(val, SYS_ICC_BPR1_EL1);
 }
 
-#define gic_read_typer(c)		readq_relaxed(c)
-#define gic_write_irouter(v, c)		writeq_relaxed(v, c)
-#define gic_read_lpir(c)		readq_relaxed(c)
-#define gic_write_lpir(v, c)		writeq_relaxed(v, c)
+/*
+ * Even in 32bit systems that use LPAE, there is no guarantee that the I/O
+ * interface provides true 64bit atomic accesses, so using strd/ldrd doesn't
+ * make much sense.
+ * Moreover, 64bit I/O emulation is extremely difficult to implement on
+ * AArch32, since the syndrome register doesn't provide any information for
+ * them.
+ * Consequently, the following IO helpers use 32bit accesses.
+ */
+static inline void __gic_writeq_nonatomic(u64 val, void __iomem *addr)
+{
+	writel_relaxed((u32)val, addr);
+	writel_relaxed((u32)(val >> 32), addr + 4);
+}
+
+static inline u64 __gic_readq_nonatomic(const void __iomem *addr)
+{
+	u64 val;
+
+	val = readl_relaxed(addr);
+	val |= (u64)readl_relaxed(addr + 4) << 32;
+	return val;
+}
+
+#define gic_read_typer(c)		__gic_readq_nonatomic(c)
+#define gic_write_irouter(v, c)		__gic_writeq_nonatomic(v, c)
+#define gic_read_lpir(c)		__gic_readq_nonatomic(c)
+#define gic_write_lpir(v, c)		__gic_writeq_nonatomic(v, c)
 
 #define gic_flush_dcache_to_poc(a,l)	__flush_dcache_area((a), (l))
 
-#define gits_read_baser(c)		readq_relaxed(c)
-#define gits_write_baser(v, c)		writeq_relaxed(v, c)
+#define gits_read_baser(c)		__gic_readq_nonatomic(c)
+#define gits_write_baser(v, c)		__gic_writeq_nonatomic(v, c)
 
-#define gits_read_cbaser(c)		readq_relaxed(c)
-#define gits_write_cbaser(v, c)		writeq_relaxed(v, c)
+#define gits_read_cbaser(c)		__gic_readq_nonatomic(c)
+#define gits_write_cbaser(v, c)		__gic_writeq_nonatomic(v, c)
 
-#define gits_write_cwriter(v, c)	writeq_relaxed(v, c)
+#define gits_write_cwriter(v, c)	__gic_writeq_nonatomic(v, c)
 
-#define gicr_read_propbaser(c)		readq_relaxed(c)
-#define gicr_write_propbaser(v, c)	writeq_relaxed(v, c)
+#define gicr_read_propbaser(c)		__gic_readq_nonatomic(c)
+#define gicr_write_propbaser(v, c)	__gic_writeq_nonatomic(v, c)
 
-#define gicr_write_pendbaser(v, c)	writeq_relaxed(v, c)
-#define gicr_read_pendbaser(c)		readq_relaxed(c)
+#define gicr_write_pendbaser(v, c)	__gic_writeq_nonatomic(v, c)
+#define gicr_read_pendbaser(c)		__gic_readq_nonatomic(c)
 
-#define gits_write_vpropbaser(v, c)	writeq_relaxed(v, c)
+#define gits_write_vpropbaser(v, c)	__gic_writeq_nonatomic(v, c)
 
-#define gits_write_vpendbaser(v, c)	writeq_relaxed(v, c)
-#define gits_read_vpendbaser(c)		readq_relaxed(c)
+#define gits_write_vpendbaser(v, c)	__gic_writeq_nonatomic(v, c)
+#define gits_read_vpendbaser(c)		__gic_readq_nonatomic(c)
 
 #endif /* __ASSEMBLY__ */
 #endif /* __ASM_ARCH_GICV3_H */
-- 
2.7.4

