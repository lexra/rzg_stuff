From 950984a8366943c632a51c17929d64b8ad6e0f31 Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@renesas.com>
Date: Thu, 2 Jul 2020 17:44:02 +0700
Subject: [PATCH 8/8] plat: renesas: bl2_fusa: Add mem initialization b/f and
 a/f ECC enable

Initialize memory before and after enabling ECC:
initialize ECC area -> enable ECC -> enable DATA area

Signed-off-by: Binh Nguyen <binh.nguyen.uw@renesas.com>
Signed-off-by: hienhuynh <hien.huynh.px@renesas.com>
---
 plat/renesas/rzg/bl2_fusa.c | 66 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)

diff --git a/plat/renesas/rzg/bl2_fusa.c b/plat/renesas/rzg/bl2_fusa.c
index 809f087..6a13dcd 100644
--- a/plat/renesas/rzg/bl2_fusa.c
+++ b/plat/renesas/rzg/bl2_fusa.c
@@ -9,6 +9,7 @@
 #include <common/debug.h>
 #include <lib/mmio.h>

+#define FUSA_DRAM_CLEAR		1

 #define	DFUSAAREACR		0xE6785000	/* DRAM FuSa Area Conf */
 #define	DECCAREACR		0xE6785040	/* DRAM ECC Area Conf */
@@ -39,6 +40,19 @@
 #define	ARRAY_SIZE(a)		(sizeof(a) / sizeof(a[0]))
 #endif

+#define	EK874_FUSAAREA			0x408000000
+#define	EK874_FUSAAREA_TOTAL		((128+256+256+256+64)*1024*1024)
+#define	EK874_ECCAREA			0x444000000
+#define	EK874_ECCAREA_TOTAL		((128+256+256+256+64)*1024*1024)
+#define	HHOPE_G2N_FUSAAREA		0x408000000
+#define	HHOPE_G2N_FUSAAREA_TOTAL	((128+256+512+512+512+64)*1024*1024)
+#define	HHOPE_G2N_ECCAREA		0x484000000
+#define	HHOPE_G2N_ECCAREA_TOTAL		((128+256+512+512+512+64)*1024*1024)
+#define	HHOPE_G2M_FUSAAREA		0x408000000
+#define	HHOPE_G2M_FUSAAREA_TOTAL	((1920)*1024*1024)
+#define	HHOPE_G2M_ECCAREA		0x608000000
+#define	HHOPE_G2M_ECCAREA_TOTAL		((1920)*1024*1024)
+
 struct rzg2_ecc_conf {
 	uint32_t fusaareacr;
 	uint32_t eccareacr;
@@ -118,6 +131,19 @@ static const uint32_t adsplcr2 = 0;
 #endif //(RZG_DRAM_ECC_FULL == 1)
 #endif //(RZG_HIHOPE_RZG2M == 1)

+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+/* Write zero-valued octa-byte words */
+static void bzero64(uintptr_t start, uint64_t size)
+{
+	/* start should be aligned on word boundary, size should be multiple of 8 */
+	volatile uint64_t *ptr = (volatile uint64_t *)start;
+	volatile uint64_t *end = ptr + (size / sizeof(uint64_t));
+
+	while (ptr < end)
+		*ptr++ = 0;
+}
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+
 /* Setup DRAM ECC configuration registers */
 #if (RZG_DRAM_ECC == 1 && RZG_EK874 == 1)
 static void bl2_enable_ecc_ek874(void)
@@ -128,6 +155,12 @@ static void bl2_enable_ecc_ek874(void)
 	conf = rzg2_ek874_conf;
 	nb_of_conf = ARRAY_SIZE(rzg2_ek874_conf);

+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing ECC area from %lx\n", EK874_ECCAREA);
+	bzero64(EK874_ECCAREA, (uint64_t)EK874_ECCAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+
 	for (n = 0; n < nb_of_conf; n++, conf++) {
 		mmio_write_32((uintptr_t)((uint32_t *)DFUSAAREACR + n), conf->fusaareacr);
 		mmio_write_32((uintptr_t)((uint32_t *)DECCAREACR + n), conf->eccareacr);
@@ -137,6 +170,13 @@ static void bl2_enable_ecc_ek874(void)
 					1 << ((conf->fusaareacr >> 24) & 0xf));

 	}
+
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM data area to initialize ECC area */
+	NOTICE("BL2: Clearing DATA area from %lx\n", EK874_FUSAAREA);
+	bzero64(EK874_FUSAAREA, (uint64_t)EK874_FUSAAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+
 }
 #endif

@@ -150,6 +190,12 @@ static void bl2_enable_ecc_hihope_rzg2n(void)
 	conf = rzg2_hihope_rzg2n_conf;
 	nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2n_conf);

+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2N_ECCAREA);
+	bzero64(HHOPE_G2N_ECCAREA, (uint64_t)HHOPE_G2N_ECCAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+
 	for (n = 0; n < nb_of_conf; n++, conf++) {
 		mmio_write_32((uintptr_t)((uint32_t *)DFUSAAREACR + n), conf->fusaareacr);
 		mmio_write_32((uintptr_t)((uint32_t *)DECCAREACR + n), conf->eccareacr);
@@ -158,12 +204,25 @@ static void bl2_enable_ecc_hihope_rzg2n(void)
 					n, conf->fusaareacr, conf->eccareacr,
 					1 << ((conf->fusaareacr >> 24) & 0xf));
 	}
+
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2N_FUSAAREA);
+	bzero64(HHOPE_G2N_FUSAAREA, (uint64_t)HHOPE_G2N_FUSAAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+
 }
 #endif

 #if (RZG_DRAM_ECC == 1 && RZG_HIHOPE_RZG2M == 1)
 static void bl2_enable_ecc_hihope_rzg2m(void)
 {
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2M_ECCAREA);
+	bzero64(HHOPE_G2M_ECCAREA, (uint64_t)HHOPE_G2M_ECCAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR0), adsplcr0);
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR1), adsplcr1);
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR2), adsplcr2);
@@ -176,6 +235,13 @@ static void bl2_enable_ecc_hihope_rzg2m(void)
 	NOTICE("     ADSPLCR2=0x%x\n", adsplcr2);
 	NOTICE("     ADSPLCR3=0x%x\n", adsplcr3);
 	NOTICE("     FUSACR=0x%x\n", fusacr);
+
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM data area to initialize ECC area */
+	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2M_FUSAAREA);
+	bzero64(HHOPE_G2M_FUSAAREA, (uint64_t)HHOPE_G2M_FUSAAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+
 }
 #endif

--
2.7.4

